#include <avr/io.h>
#include <avr/interrupt.h>

/*defining global timer:*/
uint8_t secs=0;
uint8_t mins=0;
uint8_t hrs=0;

/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER1_COMPA_vect)
{
	/*secs++;
	if(secs == 60){
		secs=0;
		mins++;
	}
	if(mins==60){
		mins=0;
		hrs++;
	}*/
	PORTC^=(1<<PC0);

}
void timer1_init() {
    /* Set CTC mode with OCR1A as TOP*/
    TCCR1B |= (1 << WGM12);
     /*Set timer prescaler to 1*/
    TCCR1B |= (1 << CS10);
     /*Load OCR1A with the desired value for 1-second interrupt*/
    OCR1A = 999999;
     /*Enable Timer1 compare match A interrupt*/
    TIMSK |= (1 << OCIE1A);
    /*Enable global interrupts*/
    sei(); /* equivalent to setting the 7th bit in the sreg to 1*/
}
//void Timer1_CTC_Square_Wave_Init(void)
//{
//
//	TCNT1 = 0;		/* Set timer1 initial count to zero */
//
//	OCR1A = 60;    /* Set the Compare value to 60 */
//
//	TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
//
//	/* Configure timer control register TCCR1A
//	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
//	 * 2. FOC1A=1 FOC1B=0
//	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
//	 */
//	TCCR1A = (1<<FOC1A);
//
//	/* Configure timer control register TCCR1B
//	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
//	 * 2. Prescaler = F_CPU/8 CS10=0 CS11=1 CS12=0
//	 */
//	TCCR1B = (1<<WGM12) | (1<<CS11);
//}

int main(void){
	DDRC=0x01;
	PORTC=0x01;
	timer1_init();
	while (1){


	}
	return 0;
}
